{"ast":null,"code":"// src/Cart/cartApi.js\n\n// Function to add an item to the cart\nexport const addToCart = async (productId, quantity) => {\n  try {\n    const response = await fetch('/api/cart/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // Include authentication header if required\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        productId,\n        quantity\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add item to cart');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding to cart:', error);\n    throw error;\n  }\n};\n\n// Function to get all items in the cart\nexport const getCartItems = async () => {\n  try {\n    const response = await fetch('/api/cart/items', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n        // Include authentication header if required\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch cart items');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching cart items:', error);\n    throw error;\n  }\n};\n\n// Function to remove an item from the cart\nexport const removeFromCart = async productId => {\n  try {\n    const response = await fetch(`/api/cart/remove/${productId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n        // Include authentication header if required\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove item from cart');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing item from cart:', error);\n    throw error;\n  }\n};\n\n// Function to update the quantity of an item in the cart\nexport const updateCartQuantity = async (productId, quantity) => {\n  try {\n    const response = await fetch('/api/cart/update', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n        // Include authentication header if required\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        productId,\n        quantity\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update cart quantity');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating cart quantity:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["addToCart","productId","quantity","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","getCartItems","removeFromCart","updateCartQuantity"],"sources":["/home/nahima/NobleNoor/noblenoor/src/Cart/cartApi.js"],"sourcesContent":["// src/Cart/cartApi.js\n\n// Function to add an item to the cart\nexport const addToCart = async (productId, quantity) => {\n    try {\n      const response = await fetch('/api/cart/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include authentication header if required\n          // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ productId, quantity }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to add item to cart');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      throw error;\n    }\n  };\n  \n  // Function to get all items in the cart\n  export const getCartItems = async () => {\n    try {\n      const response = await fetch('/api/cart/items', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include authentication header if required\n          // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to fetch cart items');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching cart items:', error);\n      throw error;\n    }\n  };\n  \n  // Function to remove an item from the cart\n  export const removeFromCart = async (productId) => {\n    try {\n      const response = await fetch(`/api/cart/remove/${productId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include authentication header if required\n          // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to remove item from cart');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      console.error('Error removing item from cart:', error);\n      throw error;\n    }\n  };\n  \n  // Function to update the quantity of an item in the cart\n  export const updateCartQuantity = async (productId, quantity) => {\n    try {\n      const response = await fetch('/api/cart/update', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include authentication header if required\n          // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ productId, quantity }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to update cart quantity');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      console.error('Error updating cart quantity:', error);\n      throw error;\n    }\n  };"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,KAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;QACA;MACF,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,SAAS;QAAEC;MAAS,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC9CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;QACA;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG,MAAOf,SAAS,IAAK;EACjD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoBH,SAAS,EAAE,EAAE;MAC5DI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;QACA;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAOhB,SAAS,EAAEC,QAAQ,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;QACA;MACF,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,SAAS;QAAEC;MAAS,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}