{"ast":null,"code":"import axios from 'axios';\nexport const API_URL = 'http://localhost:5000/'; // Replace with your actual API endpoint\n\n// Register a new user\nexport const register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/users/register`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Registration failed';\n  }\n};\n\n// Log in a user\nexport const login = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/users/login`, credentials);\n    localStorage.setItem('jwtToken', response.data.token); // Save the JWT token\n    localStorage.setItem('isLoggedIn', 'true'); // Set logged in status\n    window.dispatchEvent(new Event('loginStatusChanged')); // Dispatch login event\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Login failed';\n  }\n};\n\n// Log out a user\nexport const logout = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.setItem('isLoggedIn', 'false');\n  window.dispatchEvent(new Event('loginStatusChanged')); // Dispatch logout event\n};\n\n// Get the user's profile\nexport const getProfile = async () => {\n  const token = localStorage.getItem('jwtToken'); // Get token from localStorage\n  if (!token) {\n    throw new Error('User is not authenticated');\n  }\n  try {\n    const response = await axios.get(`${API_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}` // Pass the token in the Authorization header\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'Failed to fetch profile';\n  }\n};\n\n// Update the user's profile\nexport const updateProfile = async updates => {\n  const token = localStorage.getItem('jwtToken'); // Get token from localStorage\n  if (!token) {\n    throw new Error('User is not authenticated');\n  }\n  try {\n    const response = await axios.put(`${API_URL}/profile`, updates, {\n      headers: {\n        Authorization: `Bearer ${token}` // Pass the token in the Authorization header\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || 'Failed to update profile';\n  }\n};","map":{"version":3,"names":["axios","API_URL","register","userData","response","post","data","error","_error$response","login","credentials","localStorage","setItem","token","window","dispatchEvent","Event","_error$response2","logout","removeItem","getProfile","getItem","Error","get","headers","Authorization","_error$response3","updateProfile","updates","put","_error$response4"],"sources":["/home/nahima/NobleNoor/noblenoor/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const API_URL = 'http://localhost:5000/';  // Replace with your actual API endpoint\n\n// Register a new user\nexport const register = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/users/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || 'Registration failed';\n  }\n};\n\n// Log in a user\nexport const login = async (credentials) => {\n  try {\n    const response = await axios.post(`${API_URL}/users/login`, credentials);\n    localStorage.setItem('jwtToken', response.data.token);  // Save the JWT token\n    localStorage.setItem('isLoggedIn', 'true');  // Set logged in status\n    window.dispatchEvent(new Event('loginStatusChanged'));  // Dispatch login event\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || 'Login failed';\n  }\n};\n\n// Log out a user\nexport const logout = () => {\n  localStorage.removeItem('jwtToken');\n  localStorage.setItem('isLoggedIn', 'false');\n  window.dispatchEvent(new Event('loginStatusChanged'));  // Dispatch logout event\n};\n\n// Get the user's profile\nexport const getProfile = async () => {\n  const token = localStorage.getItem('jwtToken');  // Get token from localStorage\n  if (!token) {\n    throw new Error('User is not authenticated');\n  }\n\n  try {\n    const response = await axios.get(`${API_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`,  // Pass the token in the Authorization header\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || 'Failed to fetch profile';\n  }\n};\n\n// Update the user's profile\nexport const updateProfile = async (updates) => {\n  const token = localStorage.getItem('jwtToken');  // Get token from localStorage\n  if (!token) {\n    throw new Error('User is not authenticated');\n  }\n\n  try {\n    const response = await axios.put(`${API_URL}/profile`, updates, {\n      headers: {\n        Authorization: `Bearer ${token}`,  // Pass the token in the Authorization header\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || 'Failed to update profile';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}